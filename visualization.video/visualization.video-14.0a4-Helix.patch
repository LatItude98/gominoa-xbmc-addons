diff -ruN xbmc-14.0a4-Helix.orig/Makefile.in xbmc-14.0a4-Helix/Makefile.in
--- xbmc-14.0a4-Helix.orig/Makefile.in	2014-10-02 12:06:19.000000000 -0400
+++ xbmc-14.0a4-Helix/Makefile.in	2014-10-03 01:29:28.592112283 -0400
@@ -249,6 +249,12 @@
   INSTALL_FILTER+= .*visualization\.goom.*
 endif
 
+ifneq (@DISABLE_VIDEOVIS@,1)
+  VIS_DIRS+= xbmc/visualizations/video
+else
+  INSTALL_FILTER+= .*visualization\.video.*
+endif
+
 LIBADDON_DIRS=\
 	lib/addons/library.xbmc.addon \
 	lib/addons/library.xbmc.codec \
diff -ruN xbmc-14.0a4-Helix.orig/addons/visualization.video/addon.xml xbmc-14.0a4-Helix/addons/visualization.video/addon.xml
--- xbmc-14.0a4-Helix.orig/addons/visualization.video/addon.xml	1969-12-31 19:00:00.000000000 -0500
+++ xbmc-14.0a4-Helix/addons/visualization.video/addon.xml	2014-10-03 01:17:34.439132420 -0400
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<addon id="visualization.video"
+	version="0.1.0"
+	name="Video"
+	provider-name="gominoa">
+	<extension point="xbmc.player.musicviz"
+    	library_linux="video.vis"
+		library_osx="video.vis"
+		library_windx="video.vis"/>
+	<extension point="xbmc.addon.metadata">
+    	<summary lang="en_US">Video Player</summary>
+		<description lang="en_US">Video Player</description>
+		<disclaimer lang="en_US">Ain't my fault</disclaimer>
+		<language></language>
+		<platform>all</platform>
+		<license>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</license>
+		<forum>http://forum.xbmc.org/showthread.php?tid=205584</forum>
+		<website></website>
+		<email></email>
+		<source>https://github.com/gominoa/gominoa-xbmc-addons</source>
+	</extension>
+</addon>
diff -ruN xbmc-14.0a4-Helix.orig/addons/visualization.video/resources/settings.xml xbmc-14.0a4-Helix/addons/visualization.video/resources/settings.xml
--- xbmc-14.0a4-Helix.orig/addons/visualization.video/resources/settings.xml	1969-12-31 19:00:00.000000000 -0500
+++ xbmc-14.0a4-Helix/addons/visualization.video/resources/settings.xml	2014-10-03 00:19:59.437885149 -0400
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<settings>
+	<setting id="video" label="Video" type="video"/>
+</settings>
diff -ruN xbmc-14.0a4-Helix.orig/configure.in xbmc-14.0a4-Helix/configure.in
--- xbmc-14.0a4-Helix.orig/configure.in	2014-10-02 12:06:19.000000000 -0400
+++ xbmc-14.0a4-Helix/configure.in	2014-10-06 14:08:25.314552843 -0400
@@ -171,6 +171,8 @@
 fishbmc_disabled="== FishBMC disabled. =="
 projectm_enabled="== ProjectM enabled. =="
 projectm_disabled="== ProjectM disabled. =="
+videovis_enabled="== Video Vis enabled. =="
+videovis_disabled="== Video Vis disabled. =="
 wayland_enabled="== Wayland enabled. =="
 wayland_disabled="== Wayland disabled. =="
 x11_enabled="== X11 enabled. =="
@@ -354,6 +356,12 @@
   [use_projectm=$enableval],
   [use_projectm=yes])
 
+AC_ARG_ENABLE([videovis],
+  [AS_HELP_STRING([--enable-videovis],
+  [enable Video visualisation (default is yes)])],
+  [use_videovis=$enableval],
+  [use_videovis=yes])
+
 AC_ARG_ENABLE([wayland],
   [AS_HELP_STRING([--enable-wayland],
   [enable wayland (default is no) 'Linux Only'])],
@@ -1409,6 +1417,16 @@
   DISABLE_FISHBMC=0
 fi
 
+# VIDEOVIS
+if test "$use_videovis" = "no" || test "$use_gl" = "no"; then
+  AC_MSG_NOTICE($videovis_disabled)
+  DISABLE_VIDEOVIS=1
+  use_videovis="no"
+else
+  AC_MSG_NOTICE($videovis_enabled)
+  DISABLE_VIDEOVIS=0
+fi
+
 # PROJECTM
 if test "$use_projectm" = "no" || test "$use_gl" = "no"; then
   AC_MSG_NOTICE($projectm_disabled)
@@ -2124,6 +2142,12 @@
   final_message="$final_message\n  FishBMC:\tNo"
 fi
 
+if test "$use_videovis" = "yes"; then
+  final_message="$final_message\n  Video Vis:\tYes"
+else
+  final_message="$final_message\n  Video Vis:\tNo"
+fi
+
 if test "$use_projectm" = "yes"; then
   final_message="$final_message\n  ProjectM:\tYes"
 else
@@ -2463,6 +2487,7 @@
     xbmc/visualizations/OpenGLSpectrum/Makefile \
     xbmc/visualizations/fishBMC/Makefile \
     xbmc/visualizations/WaveForm/Makefile \
+    xbmc/visualizations/video/Makefile \
     xbmc/windowing/Makefile \
     xbmc/windowing/egl/Makefile \
     lib/addons/library.xbmc.addon/Makefile \
diff -ruN xbmc-14.0a4-Helix.orig/xbmc/visualizations/video/Makefile.in xbmc-14.0a4-Helix/xbmc/visualizations/video/Makefile.in
--- xbmc-14.0a4-Helix.orig/xbmc/visualizations/video/Makefile.in	1969-12-31 19:00:00.000000000 -0500
+++ xbmc-14.0a4-Helix/xbmc/visualizations/video/Makefile.in	2014-10-03 01:19:42.799832664 -0400
@@ -0,0 +1,21 @@
+ARCH=@ARCH@
+CXXFLAGS=-fPIC
+
+SLIB = @abs_top_srcdir@/addons/visualization.video/video.vis
+OBJS = video.o
+
+  ifeq ($(findstring osx,$(ARCH)), osx)
+    LDFLAGS += -framework OpenGL
+  else
+    LDFLAGS += -lGL
+  endif
+
+
+$(SLIB): $(OBJS)
+ifeq ($(findstring osx,$(ARCH)), osx)
+	$(CXX) $(CXXFLAGS) $(LDFLAGS) -bundle -o $(SLIB) $(OBJS)
+else
+	$(CXX) $(CXXFLAGS) $(LDFLAGS) -shared -o $(SLIB) $(OBJS)
+endif
+
+include @abs_top_srcdir@/Makefile.include
diff -ruN xbmc-14.0a4-Helix.orig/xbmc/visualizations/video/video.cpp xbmc-14.0a4-Helix/xbmc/visualizations/video/video.cpp
--- xbmc-14.0a4-Helix.orig/xbmc/visualizations/video/video.cpp	1969-12-31 19:00:00.000000000 -0500
+++ xbmc-14.0a4-Helix/xbmc/visualizations/video/video.cpp	2014-10-03 01:44:34.158174674 -0400
@@ -0,0 +1,250 @@
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+
+#ifdef __GNUC__
+#define __cdecl
+#endif
+
+#include "guilib/GraphicContext.h"
+#include "guilib/Texture.h"
+#include "guilib/GUITexture.h"
+#include "Application.h"
+#include "filesystem/SpecialProtocol.h"
+#include "settings/AdvancedSettings.h"
+#include "settings/DisplaySettings.h"
+#include "video/FFmpegVideoDecoder.h"
+#include "system.h"
+#include "utils/log.h"
+
+#include "addons/include/xbmc_vis_types.h"
+#include "addons/include/xbmc_vis_dll.h"
+
+
+extern "C" {
+#include "libavformat/avformat.h"
+#include "libavcodec/avcodec.h"
+#include "libavutil/avutil.h"
+#include "libswscale/swscale.h"
+}
+
+
+
+class CBaseTexture;
+class FFmpegVideoDecoder;
+
+CBaseTexture       *m_texture;
+FFmpegVideoDecoder *m_decoder;
+
+int    m_videoWidth, m_videoHeight; // shown video width/height, i.e. upscaled or downscaled as necessary
+int    m_displayLeft, m_displayRight, m_displayTop, m_displayBottom; // Video as shown at the display
+double m_secondsPerFrame, m_nextFrameTime, m_timeFromPrevSong;
+char   m_videoFile[1024] = "";
+
+bool openVideoFile(const CStdString& filename)
+{
+    CLog::Log(LOGDEBUG, "Video Visualization: Open: '%s'", filename.c_str());
+
+    CStdString realPath = CSpecialProtocol::TranslatePath(filename);
+
+    if (!m_decoder->open(realPath))
+    {
+        CLog::Log(LOGERROR, "Video Visualization: %s, video file %s (%s)", m_decoder->getErrorMsg().c_str(), filename.c_str(), realPath.c_str());
+        return false;
+    }
+
+    m_videoWidth  = m_decoder->getWidth();
+    m_videoHeight = m_decoder->getHeight();
+  
+    // Find out the necessary aspect ratio for height (assuming fit by width) and width (assuming fit by height)
+    const RESOLUTION_INFO info = g_graphicsContext.GetResInfo();
+    m_displayLeft   = info.Overscan.left;
+    m_displayRight  = info.Overscan.right;
+    m_displayTop    = info.Overscan.top;
+    m_displayBottom = info.Overscan.bottom;
+  
+    int screen_width  = m_displayRight  - m_displayLeft;
+    int screen_height = m_displayBottom - m_displayTop;
+
+    // Do we need to modify the output video size? This could happen in two cases:
+    // 1. Either video dimension is larger than the screen - video needs to be downscaled
+    // 2. Both video dimensions are smaller than the screen - video needs to be upscaled
+    if ((m_videoWidth > 0 && m_videoHeight > 0)
+    && ((m_videoWidth > screen_width || m_videoHeight > screen_height)
+    || (m_videoWidth < screen_width && m_videoHeight < screen_height)))
+    {
+        // Calculate the scale coefficients for width/height separately
+        double scale_width = (double)screen_width / (double)m_videoWidth;
+        double scale_height = (double)screen_height / (double)m_videoHeight;
+
+        // And apply the smallest
+        double scale  = scale_width < scale_height ? scale_width : scale_height;
+        m_videoWidth  = (int)(m_videoWidth * scale);
+        m_videoHeight = (int)(m_videoHeight * scale);
+    }
+
+    // Calculate the desktop dimensions to show the video
+    if (m_videoWidth < screen_width || m_videoHeight < screen_height)
+    {
+        m_displayLeft = (screen_width - m_videoWidth) / 2;
+        m_displayRight -= m_displayLeft;
+
+        m_displayTop = (screen_height - m_videoHeight) / 2;
+        m_displayBottom -= m_displayTop;
+    }
+  
+    m_secondsPerFrame = 1.0 / m_decoder->getFramesPerSecond();
+
+    CLog::Log(LOGDEBUG, "Video Visualization: Video file %s (%dx%d) length %g seconds opened successfully, will be shown as %dx%d at (%d, %d - %d, %d) rectangle",
+        filename.c_str(), m_decoder->getWidth(), m_decoder->getHeight(), m_decoder->getDuration(),
+        m_videoWidth, m_videoHeight, m_displayLeft, m_displayTop, m_displayRight, m_displayBottom);
+  
+    return true;
+}
+
+
+extern "C" ADDON_STATUS ADDON_Create(void* hdl, void* props)
+{
+    CLog::Log(LOGDEBUG, "Video Visualization: Create");
+
+    m_decoder = new FFmpegVideoDecoder();
+    m_timeFromPrevSong = 0.0;
+    m_texture = 0;
+
+    return ADDON_STATUS_NEED_SETTINGS;
+}
+
+
+extern "C" void Start(int iChannels, int iSamplesPerSec, int iBitsPerSample, const char* szSongName)
+{
+    CLog::Log(LOGDEBUG, "Video Visualization: Start");
+    
+    if (!openVideoFile(m_videoFile))
+        return;
+
+    if (m_timeFromPrevSong != 0.0 && !m_decoder->seek(m_timeFromPrevSong))
+        m_timeFromPrevSong = 0;
+  
+    m_texture = new CTexture(m_videoWidth, m_videoHeight, XB_FMT_A8R8G8B8);
+  
+    if (!m_texture)
+    {
+        CLog::Log( LOGERROR, "Video Visualization: Could not allocate texture" );
+        return;
+    }
+  
+    m_nextFrameTime = 0.0;
+}
+
+
+extern "C" void Render()
+{
+//    CLog::Log(LOGDEBUG, "Video Visualization: Render");
+    
+    if (!m_texture)
+        return;
+  
+    struct timeval now;
+    gettimeofday(&now, NULL);
+    double current = (double)now.tv_sec + ((double)now.tv_usec / (double)CLOCKS_PER_SEC);
+
+    // We're supposed to show m_decoder->getFramesPerSecond() frames in one second.
+    if (current >= m_nextFrameTime)
+    {	// We don't care to adjust for the exact timing
+	m_nextFrameTime = current + m_secondsPerFrame - (current - m_nextFrameTime);
+
+	while (true)
+        {
+	    if (!m_decoder->nextFrame(m_texture))
+            {	// End of video; restart
+		m_decoder->seek(0.0);
+		m_nextFrameTime = 0.0;
+		continue;
+            }
+            break;
+	}
+    }
+
+    CRect vertCoords((float)m_displayLeft, (float)m_displayTop, (float)m_displayRight, (float)m_displayBottom);
+    CGUITexture::DrawQuad(vertCoords, 0xffffffff, m_texture);
+}
+
+
+extern "C" void ADDON_Stop()
+{
+    CLog::Log(LOGDEBUG, "Video Visualization: Stop");
+    
+    delete m_texture;
+    m_texture = 0;
+
+    m_timeFromPrevSong = m_decoder->getLastFrameTime();
+    m_decoder->close();
+}
+
+
+extern "C" void ADDON_Destroy()
+{
+    CLog::Log(LOGDEBUG, "Video Visualization: Destroy");
+    
+    delete m_decoder;
+    delete m_texture;
+}
+
+
+extern "C" void GetInfo(VIS_INFO* pInfo)
+{
+    pInfo->bWantsFreq = false;
+    pInfo->iSyncDelay = 0;
+}
+
+
+extern "C" ADDON_STATUS ADDON_SetSetting(const char *strSetting, const void* value)
+{
+    CLog::Log(LOGDEBUG, "Video Visualization: SetSetting %s: '%s'", strSetting, value);
+
+    if (!strSetting || !value)
+        return ADDON_STATUS_UNKNOWN;
+
+    if (!strncmp(strSetting, "video", 5))
+    {
+        strcpy(m_videoFile, (char*)value);
+    }
+
+    return ADDON_STATUS_OK;
+}
+
+
+extern "C" bool ADDON_HasSettings()
+{
+    return true;
+}
+
+
+// These do nothing
+extern "C" bool IsLocked() { return false; }
+extern "C" bool OnAction(long flags, const void *param) { return false; }
+extern "C" void AudioData(const float* pAudioData, int iAudioDataLength, float*, int) { }
+extern "C" unsigned GetPreset() { return 0; }
+extern "C" unsigned int GetPresets(char ***presets) { return 0; }
+extern "C" unsigned int GetSubModules(char ***names) { return 0; }
+extern "C" unsigned int ADDON_GetSettings(ADDON_StructSetting ***sSet) { return 0; }
+extern "C" void ADDON_Announce(const char *flag, const char *sender, const char *message, const void *data) { }
+extern "C" void ADDON_FreeSettings() { }
+extern "C" ADDON_STATUS ADDON_GetStatus() { return ADDON_STATUS_OK; }
